
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author cjals
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;

public class StatAssignment implements ActionListener
{
    /*
    set up stat block selection
     */
    private static int[] statValues;
    private static int[] finalStats = new int[6];
    private static JComboBox<Integer> statList1;
    private static JComboBox<Integer> statList2;
    private static JComboBox<Integer> statList3;
    private static JComboBox<Integer> statList4;
    private static JComboBox<Integer> statList5;
    private static JComboBox<Integer> statList6;
    private static JLabel statConfirmation;
    private static int charStage;

    /**
     * assign stat values to attributes jframe
     * @param stats array of generated stat values
     * @param account user account logged in
     * @param character character to assign to
     * @param race race of character
     * @return final stat block
     * @throws IOException
     */
    public static int[] assignStats(int[] stats, UserAccount account, PlayerCharacter character, Race race) throws IOException {

        /*
        filepath stuff
         */
        FileDirectories dir = new FileDirectories();
        String filePath  = dir.getFilePath();

        FileCharacter fileChara = new FileCharacter(filePath);
        FileUserAccount fileUsers = new FileUserAccount(filePath);

        /*
        finish assigning character variables
         */
            character.setRace(race);
            character.setHeight(character.getGender());
            character.setWeight(character.getGender());
            statValues = character.getModifiedStats();
            /*
            transfer stat values to new array
             */
            for (int i = 0; i < 6; i++)
            {
                statValues[i] = stats[i];
            }

            /*
            new jframe
             */
            JFrame frame = new JFrame();
            frame.setBounds(100, 100, 500, 500);
            frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            frame.setVisible(true);

            JPanel panel = new JPanel();
            panel.setLayout(null);
            frame.add(panel);

            /*
            prompt
             */
            JLabel prompt = new JLabel("Choose where to assign your stats: ");
            prompt.setBounds(50, 15, 400, 25);
            panel.add(prompt);

            /*
            these next 6 are all just labels
             */
            JLabel con = new JLabel("Constitution: ");
            con.setBounds(50, 50, 125, 20);
            panel.add(con);

            JLabel str = new JLabel("Strength: ");
            str.setBounds(50, 75, 125, 20);
            panel.add(str);

            JLabel dex = new JLabel("Dexterity: ");
            dex.setBounds(50, 100, 125, 20);
            panel.add(dex);

            JLabel intel = new JLabel("Intelligence: ");
            intel.setBounds(50, 125, 125 ,20);
            panel.add(intel);

            JLabel wis = new JLabel("Wisdom: ");
            wis.setBounds(50, 150, 125, 20);
            panel.add(wis);

            JLabel cha = new JLabel("Charisma: ");
            cha.setBounds(50, 175, 125, 20);
            panel.add(cha);

            /*
            menu 1
             */
            statList1 = new JComboBox<>();
            statList1.addItem(0);
            statList1.setBounds(175,50,40, 20);
            panel.add(statList1);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList1.addItem(stats[i]);
            }

            /*
            menu 2
             */
            statList2 = new JComboBox<>();
            statList2.addItem(0);
            statList2.setBounds(175,75,40, 20);
            panel.add(statList2);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList2.addItem(stats[i]);
            }


            /*
            menu 3
             */
            statList3 = new JComboBox<>();
            statList3.addItem(0);
            statList3.setBounds(175,100,40, 20);
            panel.add(statList3);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList3.addItem(stats[i]);
            }


            /*
            menu 4
             */
            statList4 = new JComboBox<>();
            statList4.addItem(0);
            statList4.setBounds(175,125,40, 20);
            panel.add(statList4);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList4.addItem(stats[i]);
            }


            /*
            menu 5
             */
            statList5 = new JComboBox<>();
            statList5.addItem(0);
            statList5.setBounds(175,150,40, 20);
            panel.add(statList5);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList5.addItem(stats[i]);
            }


            /*
            menu 6 -- its the final menuuuuu.... dundundun duuuun... dundundun dundun.... --
             */
            statList6 = new JComboBox<>();
            statList6.addItem(0);
            statList6.setBounds(175,175,40, 20);
            panel.add(statList6);

            /*
            add items to combobox
             */
            for (int i = 0; i < 6; i++)
            {
                statList6.addItem(stats[i]);
            }


            /*
            confirm assignments
             */
            JButton confirm = new JButton("Confirm");
            confirm.setBounds(90, 200, 100, 20);
            confirm.addActionListener(e ->
            {
                int constitution = (Integer)statList1.getSelectedItem();

                int strength = (Integer)statList2.getSelectedItem();

                int dexterity = (Integer)statList3.getSelectedItem();

                int intelligence = (Integer)statList4.getSelectedItem();

                int wisdom = (Integer)statList5.getSelectedItem();

                int charisma = (Integer)statList6.getSelectedItem();

                int[] statChoices = {constitution, strength, dexterity, intelligence, wisdom, charisma};

                if (ArrayTools.contains(statChoices, 0)) // make sure all stats have a value
                {
                    statConfirmation.setText("Please choose a value for every stat.");
                }
                else
                {
                    /*
                    set up for input validation
                     */
                    int[] tempArrayChoices = new int[6];
                    int[] tempArrayGen = new int[6];

                    for (int i = 0; i < statChoices.length; i++)
                    {
                        tempArrayChoices[i] = statChoices[i];
                    }

                    for (int i = 0; i < statValues.length; i++)
                    {
                        tempArrayGen[i] = statValues[i];
                    }

                    /*
                    sort both arrays using quicksort
                     */
                    SortTools.quickSort(tempArrayChoices);
                    SortTools.quickSort(tempArrayGen);


                    /*
                    make sure that arrays are equal so that no stats are assigned twice
                     */
                    if (!(Arrays.equals(tempArrayChoices, tempArrayGen)))
                    {
                        statConfirmation.setText("Please assign a different value to each stat.");
                    }
                    else
                    {
                        for (int i = 0; i < statChoices.length; i++)
                        {
                            finalStats[i] = statValues[i];
                            statConfirmation.setText("Stats confirmed.");
                        }

                        /*
                        set stats
                         */
                        character.setGeneratedStats(finalStats);
                        try {
                            fileChara.updateFromMemory(account, character);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                        Display.displayCharacter(character, account); // display character

                    }
                }
            });
            panel.add(confirm);

            statConfirmation = new JLabel("");
            statConfirmation.setBounds(40, 225, 300, 20);
            panel.add(statConfirmation);

            /*
            button to return to login screen
             */
        JButton saveAndQuit = new JButton("Save and Quit");
        saveAndQuit.setBounds(40, 250, 150, 25);
        panel.add(saveAndQuit);
        saveAndQuit.addActionListener(e ->
        {
            charStage = 2;
            try {
                Login.login(character);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });


        return finalStats;
    }

    @Override
    public void actionPerformed(ActionEvent e)
    {

    }
}

